{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport MapView, { Callout, Marker } from 'react-native-maps';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Location from 'expo-location';\nimport * as Permissions from 'expo-permissions';\nimport LoadingMap from \"../loading/LoadingMap\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Map = function Map() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      litters = _useState4[0],\n      setLitters = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setLocation(location);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  useEffect(function () {\n    var baseUrl = \"http://178.18.252.126:1337\";\n    axios({\n      method: 'get',\n      url: baseUrl + \"/litters\"\n    }).then(function (response) {\n      var litters = response.data;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(litters), _step; !(_step = _iterator()).done;) {\n        var litter = _step.value;\n\n        if (litter.coordinates) {\n          var latLng = litter.coordinates.split(',');\n          litter.lat = parseFloat(latLng[0]);\n          litter.lng = parseFloat(latLng[1]);\n        } else {\n          console.log(JSON.stringify(litter));\n        }\n      }\n\n      setLitters(litters);\n    });\n  }, []);\n\n  if (location == null || litters == null) {\n    return _jsx(View, {\n      children: _jsx(Loading, {})\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(GooglePlacesAutocomplete, {\n      placeholder: \"Search\",\n      fetchDetails: true,\n      GooglePlacesSearchQuery: {\n        rankby: \"distance\"\n      },\n      query: {\n        key: 'AIzaSyDtZxnsrOMxXopZRZtMVHpBuOUDbdA7B3Q',\n        language: 'en',\n        type: 'establishment'\n      }\n    }), _jsx(MapView, {\n      style: styles.map,\n      showsUserLocation: true,\n      showsMyLocationButton: true,\n      showsBuildings: true,\n      userLocationFastestInterval: 5000,\n      showsCompass: true,\n      initialRegion: {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      },\n      provider: MapView.PROVIDER_GOOGLE,\n      children: _jsx(Marker, {\n        coordinate: {\n          latitude: litters[0].lat,\n          longitude: litters[0].lng\n        },\n        children: _jsx(Callout, {\n          children: _jsx(Text, {\n            children: litters[0].type\n          })\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-end'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});\nexport default Map;","map":{"version":3,"sources":["C:/Users/DCV/Documents/ReactNativeProjekt/EarthCrew/src/screens/menu/Map.js"],"names":["React","useEffect","useState","MapView","Callout","Marker","Location","Permissions","LoadingMap","GooglePlacesAutocomplete","axios","Map","location","setLocation","litters","setLitters","requestForegroundPermissionsAsync","status","setErrorMsg","getCurrentPositionAsync","baseUrl","method","url","then","response","data","litter","coordinates","latLng","split","lat","parseFloat","lng","console","log","JSON","stringify","styles","container","rankby","key","language","type","map","latitude","coords","longitude","latitudeDelta","longitudeDelta","PROVIDER_GOOGLE","StyleSheet","create","flex","justifyContent","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["\"use strict\"\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport MapView, { Callout, Marker } from 'react-native-maps';\r\nimport { StyleSheet, Text, View, Dimensions, Image, TouchableOpacity, Button } from 'react-native';\r\nimport * as Location from 'expo-location';\r\nimport * as Permissions from 'expo-permissions';\r\nimport LoadingMap from '../loading/LoadingMap';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport axios from 'axios';\r\n\r\nconst Map = () => {\r\n    const [location, setLocation] = useState(null);\r\n    const [litters, setLitters] = useState([])\r\n\r\n    useEffect(() => {\r\n        // Load actual position of user\r\n        (async () => {\r\n            let { status } = await Location.requestForegroundPermissionsAsync();\r\n            if (status !== 'granted') {\r\n                setErrorMsg('Permission to access location was denied');\r\n                return;\r\n            }\r\n            let location = await Location.getCurrentPositionAsync({});\r\n            setLocation(location);\r\n        })();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Load litters and set state\r\n        let baseUrl = \"http://178.18.252.126:1337\"\r\n        axios({\r\n            method: 'get',\r\n            url: `${baseUrl}/litters`,\r\n        }).then((response) => {\r\n            const litters = response.data;\r\n            for (let litter of litters) {\r\n                if (litter.coordinates) {\r\n                    const latLng = litter.coordinates.split(',');\r\n                    litter.lat = parseFloat(latLng[0]);\r\n                    litter.lng = parseFloat(latLng[1]);\r\n                    // else puts out litter without coordinates\r\n                } else {\r\n                    console.log(JSON.stringify(litter));\r\n                }\r\n            }\r\n            setLitters(litters);\r\n        });\r\n    }, [])\r\n\r\n    if (location == null || litters == null) {\r\n        return (\r\n            <View>\r\n                <Loading />\r\n            </View>)\r\n    }\r\n\r\n    /*\r\n    litters.map((litter, key) => {\r\n        if (litter.pictureOfLitter && litter.pictureOfLitter[0]) {\r\n            url = \"http://178.18.252.126:1337/\"; api\r\n            url = url + litter.pictureOfLitter[0].formats.large.url;\r\n        }\r\n    })*/\r\n\r\n    return (\r\n        <View style={styles.container} >\r\n            <GooglePlacesAutocomplete\r\n                placeholder='Search'\r\n                fetchDetails={true}\r\n                GooglePlacesSearchQuery={{\r\n                    rankby: \"distance\"\r\n                }}\r\n                query={{\r\n                    key: 'AIzaSyDtZxnsrOMxXopZRZtMVHpBuOUDbdA7B3Q',\r\n                    language: 'en',\r\n                    type: 'establishment'\r\n                }}\r\n            />\r\n            <MapView\r\n                style={styles.map}\r\n                showsUserLocation={true}\r\n                showsMyLocationButton={true}\r\n                showsBuildings={true}\r\n                userLocationFastestInterval={5000}\r\n                showsCompass={true}\r\n                initialRegion={{\r\n                    latitude: location.coords.latitude,\r\n                    longitude: location.coords.longitude,\r\n                    latitudeDelta: 0.0922,\r\n                    longitudeDelta: 0.0421,\r\n                }}\r\n                provider={MapView.PROVIDER_GOOGLE}>\r\n                <Marker\r\n                    coordinate={{\r\n                        latitude: litters[0].lat,\r\n                        longitude: litters[0].lng\r\n                    }}\r\n                >\r\n                    <Callout>\r\n                        <Text>{litters[0].type}</Text>\r\n                    </Callout>\r\n                </Marker>\r\n            </MapView>\r\n        </View >\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    map: {\r\n        width: Dimensions.get('window').width,\r\n        height: Dimensions.get('window').height\r\n    }\r\n});\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}