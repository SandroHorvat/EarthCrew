{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { saveUser, deleteUser } from \"../../redux/actions/UserActions\";\nvar url = 'http://178.18.252.126:1337';\nexport var login = function login(user) {\n  var requestConfig, response, json;\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(user);\n          requestConfig = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              identifier: user.identifier,\n              password: user.password\n            })\n          };\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fetch(url + \"/auth/local\", requestConfig));\n\n        case 5:\n          response = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 8:\n          json = _context.sent;\n\n          if (!json.error) {\n            _context.next = 11;\n            break;\n          }\n\n          return _context.abrupt(\"return\", false);\n\n        case 11:\n          saveUser(json.jwt, json.user);\n          return _context.abrupt(\"return\", true);\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](2);\n          alert(_context.t0);\n          return _context.abrupt(\"return\", false);\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 15]], Promise);\n};\nexport var logout = function logout(user) {\n  return _regeneratorRuntime.async(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          deleteUser();\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/DCV/Documents/ReactNativeProjekt/EarthCrew/src/app/controllers/UserController.js"],"names":["saveUser","deleteUser","url","login","user","console","log","requestConfig","method","headers","body","JSON","stringify","identifier","password","fetch","response","json","error","jwt","alert","logout"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,UAAnB;AAWA,IAAMC,GAAG,GAAG,4BAAZ;AAKA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACMG,UAAAA,aAFW,GAEK;AAClBC,YAAAA,MAAM,EAAE,MADU;AAElBC,YAAAA,OAAO,EAAE;AACL,8BAAgB;AADX,aAFS;AAKlBC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,cAAAA,UAAU,EAAET,IAAI,CAACS,UADA;AAEjBC,cAAAA,QAAQ,EAAEV,IAAI,CAACU;AAFE,aAAf;AALY,WAFL;AAAA;AAAA;AAAA,2CAcUC,KAAK,CAAIb,GAAJ,kBAAsBK,aAAtB,CAdf;;AAAA;AAcPS,UAAAA,QAdO;AAAA;AAAA,2CAeMA,QAAQ,CAACC,IAAT,EAfN;;AAAA;AAePA,UAAAA,IAfO;;AAAA,eAiBTA,IAAI,CAACC,KAjBI;AAAA;AAAA;AAAA;;AAAA,2CAkBF,KAlBE;;AAAA;AAqBblB,UAAAA,QAAQ,CAACiB,IAAI,CAACE,GAAN,EAAWF,IAAI,CAACb,IAAhB,CAAR;AArBa,2CAuBN,IAvBM;;AAAA;AAAA;AAAA;AAyBbgB,UAAAA,KAAK,aAAL;AAzBa,2CA0BN,KA1BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;AAiCP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAMjB,IAAN;AAAA;AAAA;AAAA;AAAA;AAClBH,UAAAA,UAAU;;AADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { saveUser, deleteUser } from '../../redux/actions/UserActions';\r\n\r\n/**\r\n * if you have an instance of Strapi running on your local\r\n * machine:\r\n *\r\n * 1. Run `adb reverse tcp:8163 tcp:8163` (only on android)\r\n *\r\n * 2. You have to change the access IP from localhost\r\n * to the IP of the machine Strapi is running on.\r\n */\r\nconst url = 'http://178.18.252.126:1337';\r\n\r\n/**\r\n * @param {UserModel} user\r\n */\r\nexport const login = async user => {\r\n    console.log(user)\r\n    const requestConfig = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            identifier: user.identifier,\r\n            password: user.password,\r\n        }),\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(`${url}/auth/local`, requestConfig);\r\n        const json = await response.json();\r\n\r\n        if (json.error) {\r\n            return false;\r\n        }\r\n\r\n        saveUser(json.jwt, json.user);\r\n\r\n        return true;\r\n    } catch (err) {\r\n        alert(err);\r\n        return false;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {UserModel} user\r\n */\r\nexport const logout = async user => {\r\n    deleteUser();\r\n};"]},"metadata":{},"sourceType":"module"}