{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Card } from 'react-native-elements';\nimport { Ionicons } from '@expo/vector-icons';\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Upload = function Upload(_ref) {\n  var _route$params;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  if ((_route$params = route.params) != null && _route$params.photo) {\n    var _route$params2 = route.params,\n        photo = _route$params2.photo,\n        location = _route$params2.location;\n\n    var _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        modalOpen = _useState2[0],\n        setModalOpen = _useState2[1];\n\n    var _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        litterPickedUp = _useState4[0],\n        setLitterPickedUp = _useState4[1];\n\n    var toggleSwitch = function toggleSwitch() {\n      setLitterPickedUp(function (previousState) {\n        return !previousState;\n      });\n    };\n\n    var reportLitter = function reportLitter() {\n      var coords, data, requestConfig, response, responseJson;\n      return _regeneratorRuntime.async(function reportLitter$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              coords = location.coords;\n              data = new FormData();\n              data.append('files', {\n                uri: photo.uri,\n                name: \"test.jpg\",\n                type: 'multipart/form-data'\n              });\n              requestConfig = {\n                method: 'POST',\n                body: data\n              };\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch(\"http://178.18.252.126:1337/upload\", requestConfig));\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              responseJson = _context.sent;\n              axios.post(\"http://178.18.252.126:1337/litters\", {\n                coordinates: coords.latitude + \",\" + coords.longitude,\n                type: \"Litter\",\n                pictureOfLitter: responseJson[0].id\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _jsxs(SafeAreaView, {\n      style: styles.container,\n      children: [_jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setModalOpen(true);\n        },\n        children: _jsx(Image, {\n          style: styles.photo,\n          source: {\n            uri: photo.uri\n          }\n        })\n      }), _jsx(Modal, {\n        visible: modalOpen,\n        animationType: \"slide\",\n        onRequestClose: function onRequestClose() {\n          return setModalOpen(false);\n        },\n        children: _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(Button, {\n            title: \"Close Modal\",\n            onPress: function onPress() {\n              return setModalOpen(false);\n            }\n          }), _jsx(Card, {\n            children: _jsx(Card.Title, {\n              style: styles.card,\n              children: _jsx(Text, {\n                style: {\n                  fontFamily: 'System'\n                },\n                children: litterPickedUp ? \"Not picked up\" : \"Picked up\"\n              })\n            })\n          }), _jsx(Image, {\n            style: styles.modalPhoto,\n            source: {\n              uri: photo.uri\n            }\n          }), _jsx(Switch, {\n            style: styles.switch,\n            trackColor: {\n              false: \"#00ff00\",\n              true: \"#ff0000\"\n            },\n            thumbColor: litterPickedUp ? \"#800000\" : \"#008000\",\n            ios_backgroundColor: \"#00ff00\",\n            onValueChange: toggleSwitch,\n            value: litterPickedUp\n          }), _jsx(TouchableOpacity, {\n            style: styles.sendButton,\n            onPress: function onPress() {\n              reportLitter();\n            },\n            children: _jsx(Ionicons, {\n              color: \"white\",\n              name: \"send-outline\",\n              size: SCREEN_HEIGHT * 0.07\n            })\n          }), _jsx(Card, {\n            children: _jsx(Card.Title, {\n              style: styles.card,\n              children: _jsx(Text, {\n                style: {\n                  fontFamily: 'System'\n                }\n              })\n            })\n          })]\n        })\n      })]\n    });\n  } else {\n    return _jsx(View, {\n      children: _jsx(Text, {\n        children: \"First take a photo\"\n      })\n    });\n  }\n};\n\nvar SCREEN_HEIGHT = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#38c172',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  photo: {\n    borderRadius: 20,\n    width: 200,\n    height: 220\n  },\n  modalPhoto: {\n    width: Dimensions.get('window').width / 2,\n    height: Dimensions.get('window').height / 2,\n    margin: 20,\n    borderRadius: 20,\n    backgroundColor: '#38c172'\n  },\n  card: {\n    borderRadius: 20\n  },\n  sendButton: {\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    bottom: 5,\n    right: 10,\n    zIndex: 1\n  },\n  switch: {\n    margin: 20\n  }\n});\nexport default Upload;","map":{"version":3,"sources":["C:/Users/DCV/Documents/ReactNativeProjekt/EarthCrew/src/screens/menu/Upload.js"],"names":["React","useEffect","useState","Card","Ionicons","axios","Upload","navigation","route","params","photo","location","modalOpen","setModalOpen","litterPickedUp","setLitterPickedUp","toggleSwitch","previousState","reportLitter","coords","data","FormData","append","uri","name","type","requestConfig","method","body","fetch","response","json","responseJson","post","coordinates","latitude","longitude","pictureOfLitter","id","styles","container","card","fontFamily","modalPhoto","switch","false","true","sendButton","SCREEN_HEIGHT","Dimensions","get","height","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","borderRadius","width","margin","position","bottom","right","zIndex"],"mappings":"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","sourcesContent":["\"use strict\"\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { StyleSheet, View, Image, Text, TouchableOpacity, SafeAreaView, Switch, Dimensions, Alert, Modal, Button } from 'react-native';\r\nimport { Card } from 'react-native-elements';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport axios from 'axios';\r\n\r\nconst Upload = ({ navigation, route }) => {\r\n\r\n    // When photo is present\r\n    if (route.params?.photo) {\r\n        const { photo, location } = route.params;\r\n        const [modalOpen, setModalOpen] = useState(false)\r\n        const [litterPickedUp, setLitterPickedUp] = useState(false)\r\n\r\n        const toggleSwitch = () => {\r\n            setLitterPickedUp(previousState => !previousState);\r\n        }\r\n\r\n        // Report litter\r\n        const reportLitter = async () => {\r\n            const coords = location.coords;\r\n\r\n            //Multipart request\r\n            const data = new FormData();\r\n\r\n            data.append('files', {\r\n                uri: photo.uri,\r\n                name: \"test.jpg\",\r\n                type: 'multipart/form-data'\r\n            });\r\n\r\n            const requestConfig = {\r\n                method: 'POST',\r\n                body: data,\r\n            };\r\n\r\n            const response = await fetch(\"http://178.18.252.126:1337/upload\", requestConfig);\r\n\r\n            let responseJson = await response.json();\r\n\r\n            axios.post(\"http://178.18.252.126:1337/litters\", {\r\n                coordinates: coords.latitude + \",\" + coords.longitude,\r\n                type: \"Litter\",\r\n                pictureOfLitter: responseJson[0].id\r\n            })\r\n        }\r\n\r\n        return (\r\n            <SafeAreaView style={styles.container}>\r\n                <TouchableOpacity onPress={() => setModalOpen(true)}>\r\n                    <Image style={styles.photo} source={{ uri: photo.uri }} />\r\n                </TouchableOpacity>\r\n                <Modal\r\n                    visible={modalOpen}\r\n                    animationType='slide'\r\n                    // for Android User\r\n                    onRequestClose={() => setModalOpen(false)}>\r\n                    <View style={styles.container}>\r\n                        <Button title='Close Modal' onPress={() => setModalOpen(false)} />\r\n                        <Card>\r\n                            <Card.Title style={styles.card} >\r\n                                <Text style={{ fontFamily: 'System' }}>\r\n                                    {litterPickedUp ? \"Not picked up\" : \"Picked up\"}\r\n                                </Text>\r\n                            </Card.Title>\r\n                        </Card>\r\n                        <Image style={styles.modalPhoto} source={{ uri: photo.uri }} />\r\n                        <Switch\r\n                            style={styles.switch}\r\n                            trackColor={{ false: \"#00ff00\", true: \"#ff0000\" }}\r\n                            thumbColor={litterPickedUp ? \"#800000\" : \"#008000\"}\r\n                            ios_backgroundColor=\"#00ff00\"\r\n                            onValueChange={toggleSwitch}\r\n                            value={litterPickedUp} />\r\n                        <TouchableOpacity\r\n                            style={styles.sendButton}\r\n                            onPress={() => {\r\n                                reportLitter()\r\n                            }}>\r\n                            <Ionicons\r\n                                color=\"white\"\r\n                                name=\"send-outline\"\r\n                                size={SCREEN_HEIGHT * 0.07} />\r\n                        </TouchableOpacity>\r\n                        <Card>\r\n                            <Card.Title style={styles.card} >\r\n                                <Text style={{ fontFamily: 'System' }}>\r\n                            \r\n                                </Text>\r\n                            </Card.Title>\r\n                        </Card>\r\n                    </View>\r\n                </Modal>\r\n            </SafeAreaView>\r\n        );\r\n    } else {\r\n        return <View>\r\n            <Text>First take a photo</Text>\r\n        </View>\r\n    }\r\n}\r\n\r\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#38c172',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    photo: {\r\n        borderRadius: 20,\r\n        width: 200,\r\n        height: 220\r\n    },\r\n    modalPhoto: {\r\n        width: Dimensions.get('window').width / 2,\r\n        height: Dimensions.get('window').height / 2,\r\n        margin: 20,\r\n        borderRadius: 20,\r\n        backgroundColor: '#38c172'\r\n    },\r\n    card: {\r\n        borderRadius: 20\r\n    },\r\n    sendButton: {\r\n        backgroundColor: 'transparent',\r\n        position: 'absolute',\r\n        bottom: 5,\r\n        right: 10,\r\n        zIndex: 1\r\n    },\r\n    switch: {\r\n        margin: 20\r\n    }\r\n\r\n})\r\n\r\nexport default Upload;"]},"metadata":{},"sourceType":"module"}