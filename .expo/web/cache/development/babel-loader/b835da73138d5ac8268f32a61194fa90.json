{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Google from 'expo-google-app-auth';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar GoogleLogin = function GoogleLogin() {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      accessToken = _React$useState2[0],\n      setAccessToken = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userInfo = _React$useState4[0],\n      setUserInfo = _React$useState4[1];\n\n  function signInWithGoogleAsync() {\n    var result;\n    return _regeneratorRuntime.async(function signInWithGoogleAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Google.logInAsync({\n              androidClientId: \"\",\n              iosClientId: \"1058829635392-9035ngk2nsub4cj4de7h5q1aehfdrjdv.apps.googleusercontent.com\",\n              scopes: [\"profile\", \"email\"]\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.type === \"success\") {\n              setAccessToken(result.accessToken);\n            } else {\n              console.log(\"Permission denied\");\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  function getUserData() {\n    var userInfoResponse;\n    return _regeneratorRuntime.async(function getUserData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://www.googleapis.com/userinfo/v2/me\", {\n              headers: {\n                Authorization: \"Bearer \" + accessToken\n              }\n            }));\n\n          case 2:\n            userInfoResponse = _context2.sent;\n            userInfoResponse.json().then(function (data) {\n              setUserInfo(data);\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function showUserInfo() {\n    if (userInfo) {\n      return _jsxs(View, {\n        style: styles.userInfo,\n        children: [_jsx(Image, {\n          source: {\n            uri: userInfo.picture\n          },\n          style: styles.profilePic\n        }), _jsxs(Text, {\n          children: [\"Welcome \", userInfo.name]\n        }), _jsx(Text, {\n          children: userInfo.email\n        })]\n      });\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [showUserInfo(), _jsx(Button, {\n      title: accessToken ? \"Get User Data\" : \"Login\",\n      onPress: accessToken ? getUserData : signInWithGoogleAsync\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  userInfo: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  profilePic: {\n    width: 50,\n    height: 50\n  }\n});\nexport default GoogleLogin;","map":{"version":3,"sources":["C:/Users/DCV/Documents/ReactNativeProjekt/EarthCrew/GoogleLogin.js"],"names":["StatusBar","React","Google","GoogleLogin","useState","accessToken","setAccessToken","userInfo","setUserInfo","signInWithGoogleAsync","logInAsync","androidClientId","iosClientId","scopes","result","type","console","log","getUserData","fetch","headers","Authorization","userInfoResponse","json","then","data","showUserInfo","styles","uri","picture","profilePic","name","email","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React from 'react';\r\nimport { StyleSheet, Text, View, Image, Button } from 'react-native';\r\nimport * as Google from 'expo-google-app-auth';\r\n\r\nconst GoogleLogin = () => {\r\n    const [accessToken, setAccessToken] = React.useState();\r\n    const [userInfo, setUserInfo] = React.useState();\r\n\r\n    async function signInWithGoogleAsync() {\r\n        try {\r\n            const result = await Google.logInAsync({\r\n                androidClientId: \"\",\r\n                iosClientId: \"1058829635392-9035ngk2nsub4cj4de7h5q1aehfdrjdv.apps.googleusercontent.com\",\r\n                scopes: [\"profile\", \"email\"]\r\n            });\r\n\r\n            if (result.type === \"success\") {\r\n                setAccessToken(result.accessToken);\r\n            } else {\r\n                console.log(\"Permission denied\");\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async function getUserData() {\r\n        let userInfoResponse = await fetch(\"https://www.googleapis.com/userinfo/v2/me\", {\r\n            headers: { Authorization: `Bearer ${accessToken}` }\r\n        });\r\n\r\n        userInfoResponse.json().then(data => {\r\n            setUserInfo(data);\r\n        });\r\n    }\r\n\r\n    function showUserInfo() {\r\n        if (userInfo) {\r\n            return (\r\n                <View style={styles.userInfo}>\r\n                    <Image source={{ uri: userInfo.picture }} style={styles.profilePic} />\r\n                    <Text>Welcome {userInfo.name}</Text>\r\n                    <Text>{userInfo.email}</Text>\r\n                </View>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            {showUserInfo()}\r\n            <Button title={accessToken ? \"Get User Data\" : \"Login\"} onPress={accessToken ? getUserData : signInWithGoogleAsync} />\r\n            <StatusBar style=\"auto\" />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    userInfo: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    profilePic: {\r\n        width: 50,\r\n        height: 50\r\n    }\r\n});\r\n\r\nexport default GoogleLogin;"]},"metadata":{},"sourceType":"module"}